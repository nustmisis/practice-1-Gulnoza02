{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0ae4fe0",
   "metadata": {},
   "source": [
    "## Регулярки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1b30de1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a7b0549",
   "metadata": {},
   "source": [
    "## Пример использования всех основных функций"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4677a614",
   "metadata": {},
   "outputs": [],
   "source": [
    "match = re.search(r'\\d\\d\\D\\d\\d', r'Телефон 123-12-12') \n",
    "print(match[0] if match else 'Not found') \n",
    "# -> 23-12 \n",
    "match = re.search(r'\\d\\d\\D\\d\\d', r'Телефон 1231212') \n",
    "print(match[0] if match else 'Not found') \n",
    "# -> Not found \n",
    "\n",
    "match = re.fullmatch(r'\\d\\d\\D\\d\\d', r'12-12') \n",
    "print('YES' if match else 'NO') \n",
    "# -> YES \n",
    "match = re.fullmatch(r'\\d\\d\\D\\d\\d', r'Т. 12-12') \n",
    "print('YES' if match else 'NO') \n",
    "# -> NO \n",
    "\n",
    "print(re.split(r'\\W+', 'Где, скажите мне, мои очки??!')) \n",
    "# -> ['Где', 'скажите', 'мне', 'мои', 'очки', ''] \n",
    "\n",
    "print(re.findall(r'\\d\\d\\.\\d\\d\\.\\d{4}', \n",
    "                 r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017')) \n",
    "# -> ['19.01.2018', '01.09.2017'] \n",
    "\n",
    "for m in re.finditer(r'\\d\\d\\.\\d\\d\\.\\d{4}', r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017'): \n",
    "    print('Дата', m[0], 'начинается с позиции', m.start()) \n",
    "# -> Дата 19.01.2018 начинается с позиции 20 \n",
    "# -> Дата 01.09.2017 начинается с позиции 45 \n",
    "\n",
    "print(re.sub(r'\\d\\d\\.\\d\\d\\.\\d{4}', \n",
    "             r'DD.MM.YYYY', \n",
    "             r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017')) \n",
    "# -> Эта строка написана DD.MM.YYYY, а могла бы и DD.MM.YYYY "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71ea792d",
   "metadata": {},
   "outputs": [],
   "source": [
    "match = re.fullmatch(r'\\d\\d\\D\\d\\d', r'12-12') \n",
    "match.string"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "517c3c10",
   "metadata": {},
   "source": [
    "## Python offers different primitive operations based on regular expressions: <br>\n",
    "re.match() checks for a match only at the beginning of the string <br>\n",
    "re.search() checks for a match anywhere in the string (this is what Perl does by default) <br>\n",
    "re.fullmatch() checks for entire string to be a match <br>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3608600d",
   "metadata": {},
   "outputs": [],
   "source": [
    "re.match(\"c\", \"abcdef\")    # No match\n",
    "re.search(\"c\", \"abcdefc)   # Match\n",
    "re.fullmatch(\"p.*n\", \"python\") # Match\n",
    "re.fullmatch(\"r.*n\", \"python\") # No match"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21e6653f",
   "metadata": {},
   "outputs": [],
   "source": [
    "re.search(\"c\", \"abcdefc\").group(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "497e79d4",
   "metadata": {},
   "source": [
    "## Группа заданий №0\n",
    "Найдите все натуральные числа (возможно, окружённые буквами);<br>\n",
    "Найдите все «слова», написанные капсом (то есть строго заглавными), возможно внутри настоящих слов (аааБББввв);<br>\n",
    "Найдите слова, в которых есть русская буква, а когда-нибудь за ней цифра;<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17fd392a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "72ea0a3d",
   "metadata": {},
   "source": [
    "## Задание №1\n",
    "В России применяются регистрационные знаки нескольких видов.\n",
    "Общего в них то, что они состоят из цифр и букв. Причём используются только 12 букв кириллицы, имеющие графические аналоги в латинском алфавите — А, В, Е, К, М, Н, О, Р, С, Т, У и Х."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a98c6976",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e432c5f0",
   "metadata": {},
   "source": [
    "## Задание №2\n",
    "Слово — это последовательность из букв (русских или английских), внутри которой могут быть дефисы.\n",
    "На вход даётся текст, посчитайте, сколько в нём слов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22e453fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b44e294f",
   "metadata": {},
   "source": [
    "## Задание №3\n",
    "Вовочка подготовил одно очень важное письмо, но везде указал неправильное время.\n",
    "Поэтому нужно заменить все вхождения времени на строку (TBD). Время — это строка вида HH:MM:SS или HH:MM, в которой HH — число от 00 до 23, а MM и SS — число от 00 до 59."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a82da986",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b756392",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8f1143e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00de8eec",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9213aa41",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fa4aae8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a27298cd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96fb2f35",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
